{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PokemonService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'https://softwium.com/api/pokemons';\n    this.favoritesKey = 'favoritePokemons';\n  }\n  getAllPokemons() {\n    return this.http.get(this.url).pipe(map(pokemons => {\n      // Filtra os pokemons para terem IDs únicos\n      const uniquePokemons = pokemons.filter((pokemon, index, self) => index === self.findIndex(p => p.id === pokemon.id));\n      return uniquePokemons.slice(0, 500); // Limita o número de pokemons\n    }));\n  }\n\n  getPokemonImage(id) {\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\n  }\n  getPokemonById(id) {\n    return this.http.get(`${this.url}/${id}`);\n  }\n  // Retrieve favorites from localStorage\n  getAllFavorites() {\n    const favoritesJson = localStorage.getItem(this.favoritesKey);\n    return favoritesJson ? JSON.parse(favoritesJson) : [];\n  }\n  // Save favorites to localStorage\n  saveFavorites(favorites) {\n    localStorage.setItem(this.favoritesKey, JSON.stringify(favorites));\n  }\n  // updates to show the favorites\n  getFavorites() {\n    return this.http.get(this.url).pipe(map(pokemons => {\n      const favorites = this.getAllFavorites();\n      pokemons.forEach(pokemon => {\n        pokemon.favorite = favorites.some(favorite => favorite.id === pokemon.id);\n      });\n      return pokemons;\n    }));\n  }\n  // Add Pokemon to favorites\n  addToFavorites(pokemon) {\n    let favorites = this.getAllFavorites();\n    if (!favorites.some(p => p.id === pokemon.id)) {\n      favorites.push(pokemon);\n      this.saveFavorites(favorites);\n    }\n  }\n  // Remove Pokemon from favorites\n  removeFromFavorites(pokemon) {\n    let favorites = this.getAllFavorites().filter(p => p.id !== pokemon.id);\n    this.saveFavorites(favorites);\n  }\n  static #_ = this.ɵfac = function PokemonService_Factory(t) {\n    return new (t || PokemonService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PokemonService,\n    factory: PokemonService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","PokemonService","constructor","http","url","favoritesKey","getAllPokemons","get","pipe","pokemons","uniquePokemons","filter","pokemon","index","self","findIndex","p","id","slice","getPokemonImage","getPokemonById","getAllFavorites","favoritesJson","localStorage","getItem","JSON","parse","saveFavorites","favorites","setItem","stringify","getFavorites","forEach","favorite","some","addToFavorites","push","removeFromFavorites","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\GROWTH\\CURSO\\CLASSES\\Angular\\PokeWRLD\\PokeWRLD\\src\\app\\Services\\pokemon.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Pokemon } from '../Models/pokemon';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PokemonService {\r\n  private url: string = 'https://softwium.com/api/pokemons';\r\n\r\n  private favoritesKey = 'favoritePokemons';\r\n  \r\n  constructor(private http: HttpClient) { }\r\n\r\n\r\n  public getAllPokemons(): Observable<Pokemon[]> {\r\n    return this.http.get<Pokemon[]>(this.url).pipe(\r\n      map((pokemons: Pokemon[]) => {\r\n        // Filtra os pokemons para terem IDs únicos\r\n        const uniquePokemons = pokemons.filter((pokemon, index, self) =>\r\n          index === self.findIndex((p) => (\r\n            p.id === pokemon.id\r\n          ))\r\n        );\r\n        return uniquePokemons.slice(0, 500); // Limita o número de pokemons\r\n      })\r\n    );\r\n  }\r\n  getPokemonImage(id: number): string {\r\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\r\n  }\r\n  public getPokemonById(id: number): Observable<Pokemon> {\r\n    return this.http.get<Pokemon>(`${this.url}/${id}`);\r\n  }\r\n\r\n  // Retrieve favorites from localStorage\r\n  getAllFavorites(): Pokemon[] {\r\n    const favoritesJson = localStorage.getItem(this.favoritesKey);\r\n    return favoritesJson ? JSON.parse(favoritesJson) : [];\r\n  }\r\n\r\n  // Save favorites to localStorage\r\n  saveFavorites(favorites: Pokemon[]): void {\r\n    localStorage.setItem(this.favoritesKey, JSON.stringify(favorites));\r\n  }\r\n\r\n  // updates to show the favorites\r\n  getFavorites(): Observable<Pokemon[]> {\r\n    return this.http.get<Pokemon[]>(this.url).pipe(\r\n      map((pokemons: Pokemon[]) => {\r\n        const favorites = this.getAllFavorites();\r\n        pokemons.forEach(pokemon => {\r\n          pokemon.favorite = favorites.some(favorite => favorite.id === pokemon.id);\r\n        });\r\n        return pokemons;\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  // Add Pokemon to favorites\r\n  addToFavorites(pokemon: Pokemon): void {\r\n    let favorites = this.getAllFavorites();\r\n    if (!favorites.some(p => p.id === pokemon.id)) {\r\n      favorites.push(pokemon);\r\n      this.saveFavorites(favorites);\r\n    }\r\n  }\r\n\r\n  // Remove Pokemon from favorites\r\n  removeFromFavorites(pokemon: Pokemon): void {\r\n    let favorites = this.getAllFavorites().filter(p => p.id !== pokemon.id);\r\n    this.saveFavorites(favorites);\r\n  }\r\n\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}