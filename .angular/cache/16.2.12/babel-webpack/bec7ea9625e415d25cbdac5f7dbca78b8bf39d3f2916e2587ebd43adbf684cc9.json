{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PokemonService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'https://softwium.com/api/pokemons';\n    this.favoritesKey = 'favoritePokemons';\n  }\n  getAllPokemons() {\n    return this.http.get(this.url).pipe(map(pokemons => pokemons.slice(0, 390)));\n  }\n  getPokemonImage(id) {\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\n  }\n  getPokemonById(id) {\n    return this.http.get(`${this.url}/${id}`);\n  }\n  // Retrieve favorites from localStorage\n  getAllFavorites() {\n    return this.http.get(this.favoritesUrl);\n  }\n  // Save favorites to localStorage\n  saveFavorites(favorites) {\n    localStorage.setItem(this.favoritesKey, JSON.stringify(favorites));\n  }\n  // Add Pokemon to favorites\n  addToFavorites(pokemon) {\n    let favorites = this.getAllFavorites();\n    if (!favorites.some(p => p.id === pokemon.id)) {\n      favorites.push(pokemon);\n      this.saveFavorites(favorites);\n    }\n  }\n  // Remove Pokemon from favorites\n  removeFromFavorites(pokemon) {\n    let favorites = this.getAllFavorites().filter(p => p.id !== pokemon.id);\n    this.saveFavorites(favorites);\n  }\n  static #_ = this.ɵfac = function PokemonService_Factory(t) {\n    return new (t || PokemonService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PokemonService,\n    factory: PokemonService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","PokemonService","constructor","http","url","favoritesKey","getAllPokemons","get","pipe","pokemons","slice","getPokemonImage","id","getPokemonById","getAllFavorites","favoritesUrl","saveFavorites","favorites","localStorage","setItem","JSON","stringify","addToFavorites","pokemon","some","p","push","removeFromFavorites","filter","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\GROWTH\\CURSO\\CLASSES\\Angular\\PokeWRLD\\PokeWRLD\\src\\app\\Services\\pokemon.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Pokemon } from '../Models/pokemon';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PokemonService {\r\n  private url: string = 'https://softwium.com/api/pokemons';\r\n\r\n  private favoritesKey = 'favoritePokemons';\r\n\r\n  \r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getAllPokemons(): Observable<Pokemon[]> {\r\n    return this.http.get<Pokemon[]>(this.url).pipe(\r\n      map((pokemons: Pokemon[]) => pokemons.slice(0, 390))\r\n    );\r\n  }\r\n  getPokemonImage(id: number): string {\r\n    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;\r\n  }\r\n  public getPokemonById(id: number): Observable<Pokemon> {\r\n    return this.http.get<Pokemon>(`${this.url}/${id}`);\r\n  }\r\n\r\n  // Retrieve favorites from localStorage\r\n  getAllFavorites(): Observable<Pokemon[]> {\r\n    return this.http.get<Pokemon[]>(this.favoritesUrl);\r\n  }\r\n\r\n  // Save favorites to localStorage\r\n  saveFavorites(favorites: Pokemon[]): void {\r\n    localStorage.setItem(this.favoritesKey, JSON.stringify(favorites));\r\n  }\r\n\r\n  // Add Pokemon to favorites\r\n  addToFavorites(pokemon: Pokemon): void {\r\n    let favorites = this.getAllFavorites();\r\n    if (!favorites.some(p => p.id === pokemon.id)) {\r\n      favorites.push(pokemon);\r\n      this.saveFavorites(favorites);\r\n    }\r\n  }\r\n\r\n  // Remove Pokemon from favorites\r\n  removeFromFavorites(pokemon: Pokemon): void {\r\n    let favorites = this.getAllFavorites().filter(p => p.id !== pokemon.id);\r\n    this.saveFavorites(favorites);\r\n  }\r\n\r\n}\r\n\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAMpC,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IALhB,KAAAC,GAAG,GAAW,mCAAmC;IAEjD,KAAAC,YAAY,GAAG,kBAAkB;EAGD;EAEjCC,cAAcA,CAAA;IACnB,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAY,IAAI,CAACH,GAAG,CAAC,CAACI,IAAI,CAC5CR,GAAG,CAAES,QAAmB,IAAKA,QAAQ,CAACC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CACrD;EACH;EACAC,eAAeA,CAACC,EAAU;IACxB,OAAO,4EAA4EA,EAAE,MAAM;EAC7F;EACOC,cAAcA,CAACD,EAAU;IAC9B,OAAO,IAAI,CAACT,IAAI,CAACI,GAAG,CAAU,GAAG,IAAI,CAACH,GAAG,IAAIQ,EAAE,EAAE,CAAC;EACpD;EAEA;EACAE,eAAeA,CAAA;IACb,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAY,IAAI,CAACQ,YAAY,CAAC;EACpD;EAEA;EACAC,aAAaA,CAACC,SAAoB;IAChCC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACd,YAAY,EAAEe,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC;EACpE;EAEA;EACAK,cAAcA,CAACC,OAAgB;IAC7B,IAAIN,SAAS,GAAG,IAAI,CAACH,eAAe,EAAE;IACtC,IAAI,CAACG,SAAS,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAKW,OAAO,CAACX,EAAE,CAAC,EAAE;MAC7CK,SAAS,CAACS,IAAI,CAACH,OAAO,CAAC;MACvB,IAAI,CAACP,aAAa,CAACC,SAAS,CAAC;;EAEjC;EAEA;EACAU,mBAAmBA,CAACJ,OAAgB;IAClC,IAAIN,SAAS,GAAG,IAAI,CAACH,eAAe,EAAE,CAACc,MAAM,CAACH,CAAC,IAAIA,CAAC,CAACb,EAAE,KAAKW,OAAO,CAACX,EAAE,CAAC;IACvE,IAAI,CAACI,aAAa,CAACC,SAAS,CAAC;EAC/B;EAAC,QAAAY,CAAA,G;qBA3CU5B,cAAc,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdjC,cAAc;IAAAkC,OAAA,EAAdlC,cAAc,CAAAmC,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}