{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let BattlesComponent = class BattlesComponent {\n  constructor(pokemonService) {\n    this.pokemonService = pokemonService;\n    this.pokemonA = '';\n    this.pokemonB = '';\n    this.battleResult = '';\n    this.pokemonList = []; // Assuming you have a list of all Pokémon\n    this.filteredPokemonListA = [];\n    this.filteredPokemonListB = [];\n  }\n  ngOnInit() {\n    this.pokemonService.getAllPokemons().subscribe(pokemons => {\n      this.pokemonList = pokemons;\n    });\n  }\n  filterPokemon(query) {\n    if (query.trim() === '') {\n      this.filteredPokemonListA = [];\n      this.filteredPokemonListB = [];\n      return;\n    }\n    this.filteredPokemonListA = this.pokemonList.filter(pokemon => pokemon.name.toLowerCase().includes(query.toLowerCase()) || pokemon.id.toString().includes(query));\n    this.filteredPokemonListB = this.filteredPokemonListA;\n  }\n  selectPokemonA(pokemon) {\n    this.pokemonA = pokemon.name;\n    this.filteredPokemonListA = [];\n  }\n  selectPokemonB(pokemon) {\n    this.pokemonB = pokemon.name;\n    this.filteredPokemonListB = [];\n  }\n  simulateBattle() {\n    // Simulate battle logic (e.g., coin flip)\n    const winner = Math.random() < 0.5 ? this.pokemonA : this.pokemonB;\n    this.battleResult = `${winner} wins the battle!`;\n  }\n};\nBattlesComponent = __decorate([Component({\n  selector: 'app-battles',\n  templateUrl: './battles.component.html',\n  styleUrls: ['./battles.component.css']\n})], BattlesComponent);","map":{"version":3,"names":["Component","BattlesComponent","constructor","pokemonService","pokemonA","pokemonB","battleResult","pokemonList","filteredPokemonListA","filteredPokemonListB","ngOnInit","getAllPokemons","subscribe","pokemons","filterPokemon","query","trim","filter","pokemon","name","toLowerCase","includes","id","toString","selectPokemonA","selectPokemonB","simulateBattle","winner","Math","random","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\GROWTH\\CURSO\\CLASSES\\Angular\\PokeWRLD\\PokeWRLD\\src\\app\\Components\\battles\\battles.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { PokemonService } from '../Services/pokemon.service';\nimport { Pokemon } from '../Models/pokemon';\n\n@Component({\n  selector: 'app-battles',\n  templateUrl: './battles.component.html',\n  styleUrls: ['./battles.component.css']\n})\nexport class BattlesComponent {\n  pokemonA: string = '';\n  pokemonB: string = '';\n  battleResult: string = '';\n  pokemonList: Pokemon[] = []; // Assuming you have a list of all Pokémon\n  filteredPokemonListA: Pokemon[] = [];\n  filteredPokemonListB: Pokemon[] = [];\n\n  constructor(private pokemonService: PokemonService) { }\n\n  ngOnInit(): void {\n    this.pokemonService.getAllPokemons().subscribe(\n      (pokemons: Pokemon[]) => {\n        this.pokemonList = pokemons;\n      }\n    );\n  }\n\n  filterPokemon(query: string): void {\n    if (query.trim() === '') {\n      this.filteredPokemonListA = [];\n      this.filteredPokemonListB = [];\n      return;\n    }\n    this.filteredPokemonListA = this.pokemonList.filter(pokemon =>\n      pokemon.name.toLowerCase().includes(query.toLowerCase()) ||\n      pokemon.id.toString().includes(query)\n    );\n    this.filteredPokemonListB = this.filteredPokemonListA;\n  }\n\n  selectPokemonA(pokemon: Pokemon): void {\n    this.pokemonA = pokemon.name;\n    this.filteredPokemonListA = [];\n  }\n\n  selectPokemonB(pokemon: Pokemon): void {\n    this.pokemonB = pokemon.name;\n    this.filteredPokemonListB = [];\n  }\n\n  simulateBattle(): void {\n    // Simulate battle logic (e.g., coin flip)\n    const winner = Math.random() < 0.5 ? this.pokemonA : this.pokemonB;\n    this.battleResult = `${winner} wins the battle!`;\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAQ3BC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAPlC,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,YAAY,GAAW,EAAE;IACzB,KAAAC,WAAW,GAAc,EAAE,CAAC,CAAC;IAC7B,KAAAC,oBAAoB,GAAc,EAAE;IACpC,KAAAC,oBAAoB,GAAc,EAAE;EAEkB;EAEtDC,QAAQA,CAAA;IACN,IAAI,CAACP,cAAc,CAACQ,cAAc,EAAE,CAACC,SAAS,CAC3CC,QAAmB,IAAI;MACtB,IAAI,CAACN,WAAW,GAAGM,QAAQ;IAC7B,CAAC,CACF;EACH;EAEAC,aAAaA,CAACC,KAAa;IACzB,IAAIA,KAAK,CAACC,IAAI,EAAE,KAAK,EAAE,EAAE;MACvB,IAAI,CAACR,oBAAoB,GAAG,EAAE;MAC9B,IAAI,CAACC,oBAAoB,GAAG,EAAE;MAC9B;;IAEF,IAAI,CAACD,oBAAoB,GAAG,IAAI,CAACD,WAAW,CAACU,MAAM,CAACC,OAAO,IACzDA,OAAO,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,EAAE,CAAC,IACxDF,OAAO,CAACI,EAAE,CAACC,QAAQ,EAAE,CAACF,QAAQ,CAACN,KAAK,CAAC,CACtC;IACD,IAAI,CAACN,oBAAoB,GAAG,IAAI,CAACD,oBAAoB;EACvD;EAEAgB,cAAcA,CAACN,OAAgB;IAC7B,IAAI,CAACd,QAAQ,GAAGc,OAAO,CAACC,IAAI;IAC5B,IAAI,CAACX,oBAAoB,GAAG,EAAE;EAChC;EAEAiB,cAAcA,CAACP,OAAgB;IAC7B,IAAI,CAACb,QAAQ,GAAGa,OAAO,CAACC,IAAI;IAC5B,IAAI,CAACV,oBAAoB,GAAG,EAAE;EAChC;EAEAiB,cAAcA,CAAA;IACZ;IACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,GAAG,IAAI,CAACzB,QAAQ,GAAG,IAAI,CAACC,QAAQ;IAClE,IAAI,CAACC,YAAY,GAAG,GAAGqB,MAAM,mBAAmB;EAClD;CACD;AA9CY1B,gBAAgB,GAAA6B,UAAA,EAL5B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EACWhC,gBAAgB,CA8C5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}